---
import Layout from '../../layouts/Layout.astro';
import NavBar from '../../components/NavBar.astro';
import '../../styles/global.css';

const posts = import.meta.glob<any>('../posts/*.md', { eager: true });
const allPosts = Object.values(posts);
const sortedPosts = allPosts.sort(
  (a: any, b: any) =>
    new Date(b.frontmatter.date).getTime() -
    new Date(a.frontmatter.date).getTime()
);

function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
  }).format(date);
}
---

<Layout>
  <NavBar />
  <main class="pt-12 pb-20">
    <div class="max-w-[1000px] mx-auto px-6">
      <div class="mb-12">
        <h1 class="text-4xl md:text-5xl font-bold mb-3 space-mono-bold">
          Blogs
        </h1>
        <p class="text-lg text-[var(--text-secondary)] mb-6">
          writing about systems, performance, and the craft of building software
        </p>

        <div class="relative">
          <input
            type="text"
            id="search-input"
            placeholder="Search blogs..."
            class="w-full px-4 py-3 bg-[var(--bg-surface)] border border-[var(--border)] rounded-lg text-[var(--text-primary)] placeholder:text-[var(--text-secondary)] focus:outline-none focus:border-[var(--accent)] transition-colors"
          />
          <svg
            class="w-5 h-5 absolute right-4 top-1/2 -translate-y-1/2 text-[var(--text-secondary)] pointer-events-none"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
      </div>

      {
        sortedPosts.length > 0 ? (
          <div id="posts-container" class="space-y-12">
            {sortedPosts.map(post => (
              <article
                class="post-item border-l border-[var(--border)] pl-6 hover:border-[var(--accent)] transition-colors"
                data-search-text={`${post.frontmatter.title.toLowerCase()} ${post.frontmatter.description.toLowerCase()} ${post.frontmatter.tags?.join(' ').toLowerCase() || ''}`}
              >
                <a href={post.url} class="block group">
                  <div class="flex items-baseline justify-between gap-4 mb-2">
                    <h2 class="text-2xl md:text-3xl font-bold text-[var(--text-primary)] group-hover:text-[var(--accent)] transition-colors space-mono-bold">
                      {post.frontmatter.title}
                    </h2>
                    <time class="text-sm text-[var(--text-secondary)] whitespace-nowrap">
                      {formatDate(post.frontmatter.date)}
                    </time>
                  </div>
                  <p class="text-[var(--text-secondary)] mb-3 leading-relaxed">
                    {post.frontmatter.description}
                  </p>
                  {post.frontmatter.tags &&
                    post.frontmatter.tags.length > 0 && (
                      <div class="flex flex-wrap gap-2">
                        {post.frontmatter.tags.map((tag: string) => (
                          <span class="text-xs px-2 py-1 rounded-full bg-[var(--bg-surface)] text-[var(--text-secondary)] border border-[var(--border)] group-hover:text-[var(--accent)] group-hover:border-[var(--accent)] transition-colors">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                </a>
              </article>
            ))}
          </div>
        ) : (
          <div class="text-center py-16">
            <p class="text-[var(--text-secondary)]">
              No posts yet. Check back soon.
            </p>
          </div>
        )
      }

      <div id="no-results" class="hidden text-center py-16">
        <p class="text-[var(--text-secondary)]">
          No blogs found matching your search.
        </p>
      </div>
    </div>
  </main>
</Layout>

<script>
  const searchInput = document.getElementById(
    'search-input'
  ) as HTMLInputElement;
  const postsContainer = document.getElementById('posts-container');
  const noResults = document.getElementById('no-results');
  const postItems = document.querySelectorAll('.post-item');

  let debounceTimer: ReturnType<typeof setTimeout>;

  function debounce(func: (...args: any[]) => void, delay: number) {
    return (...args: any[]) => {
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(() => func(...args), delay);
    };
  }

  function filterPosts(query: string) {
    const lowerQuery = query.toLowerCase().trim();

    if (!lowerQuery) {
      postItems.forEach(item => {
        (item as HTMLElement).style.display = '';
      });
      if (noResults) noResults.classList.add('hidden');
      if (postsContainer) postsContainer.classList.remove('hidden');
      return;
    }

    let visibleCount = 0;

    postItems.forEach(item => {
      const searchText = (item as HTMLElement).dataset.searchText || '';
      const matches = searchText.includes(lowerQuery);

      if (matches) {
        (item as HTMLElement).style.display = '';
        visibleCount++;
      } else {
        (item as HTMLElement).style.display = 'none';
      }
    });

    if (visibleCount === 0) {
      if (noResults) noResults.classList.remove('hidden');
      if (postsContainer) postsContainer.classList.add('hidden');
    } else {
      if (noResults) noResults.classList.add('hidden');
      if (postsContainer) postsContainer.classList.remove('hidden');
    }
  }

  const debouncedFilter = debounce(filterPosts, 300);

  if (searchInput) {
    searchInput.addEventListener('input', e => {
      const target = e.target as HTMLInputElement;
      debouncedFilter(target.value);
    });
  }
</script>
