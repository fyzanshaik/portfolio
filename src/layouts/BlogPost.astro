---
import Layout from './Layout.astro';
import NavBar from '../components/NavBar.astro';
import '../styles/global.css';

const { frontmatter } = Astro.props;

function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(date);
}
---

<Layout>
  <NavBar />

  <div id="progress-bar-mobile" class="md:hidden fixed top-0 left-0 w-full h-1 bg-[var(--border)] z-40">
    <div id="progress-fill-mobile" class="h-full bg-[var(--accent)] transition-all duration-150" style="width: 0%"></div>
  </div>

  <main class="pt-12 pb-20">
    <div class="max-w-[1000px] mx-auto px-6">
      <a href="/blog" class="inline-flex items-center gap-2 text-[var(--text-secondary)] hover:text-[var(--accent)] mb-12 transition-colors">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Back to Blog
      </a>

      <article class="border-l border-[var(--border)] pl-8 md:pl-12">
        <header class="mb-12 text-center">
          <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 space-mono-bold leading-tight">
            {frontmatter.title}
          </h1>
          <p class="text-lg text-[var(--text-secondary)] mb-6 leading-relaxed">{frontmatter.description}</p>
          <div class="flex flex-wrap items-center justify-center gap-4 text-sm text-[var(--text-secondary)]">
            <time>{formatDate(frontmatter.date)}</time>
            <span id="reading-time" class="text-[var(--text-secondary)]">• calculating...</span>
            {frontmatter.tags && frontmatter.tags.length > 0 && (
              <div class="flex flex-wrap gap-2">
                {frontmatter.tags.map((tag: string) => (
                  <span class="px-2 py-1 rounded bg-[var(--bg-surface)] text-[var(--accent)] border border-[var(--border)]">
                    {tag}
                  </span>
                ))}
              </div>
            )}
          </div>
        </header>

        <div id="blog-content" class="prose prose-invert max-w-none">
          <slot />
        </div>
      </article>
    </div>
  </main>
</Layout>

<script>
  function calculateReadingTime() {
    const content = document.getElementById('blog-content');
    if (content) {
      const text = content.innerText || content.textContent || '';
      const wordCount = text.trim().split(/\s+/).length;
      const wordsPerMinute = 200;
      const minutes = Math.ceil(wordCount / wordsPerMinute);
      const readingTimeEl = document.getElementById('reading-time');
      if (readingTimeEl) {
        readingTimeEl.textContent = `• ${minutes} min read`;
      }
    }
  }

  function updateProgressBar() {
    const windowHeight = window.innerHeight;
    const documentHeight = document.documentElement.scrollHeight;
    const scrollTop = window.scrollY || document.documentElement.scrollTop;
    const scrollPercent = (scrollTop / (documentHeight - windowHeight)) * 100;

    const progressFillMobile = document.getElementById('progress-fill-mobile');
    if (progressFillMobile) {
      progressFillMobile.style.width = `${Math.min(100, Math.max(0, scrollPercent))}%`;
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      calculateReadingTime();
      updateProgressBar();
    });
  } else {
    calculateReadingTime();
    updateProgressBar();
  }

  window.addEventListener('scroll', updateProgressBar, { passive: true });
</script>

<style is:global>
  .prose {
    color: var(--text-primary);
  }

  .prose h2 {
    font-size: 1.875rem;
    font-weight: 700;
    margin-top: 2rem;
    margin-bottom: 1rem;
    color: var(--text-primary);
  }

  .prose h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    color: var(--text-primary);
  }

  .prose p {
    margin-bottom: 1.25rem;
    line-height: 1.75;
    color: var(--text-secondary);
  }

  .prose a {
    color: var(--accent);
    text-decoration: underline;
  }

  .prose a:hover {
    opacity: 0.8;
  }

  .prose code {
    background-color: var(--bg-primary);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
    font-family: "Space Mono", monospace;
    color: var(--accent);
  }

  .prose pre {
    background-color: var(--bg-primary);
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1.5rem 0;
    border: 1px solid var(--border);
  }

  .prose pre code {
    background-color: transparent;
    padding: 0;
    border-radius: 0;
    color: var(--text-primary);
  }

  .prose ul, .prose ol {
    margin: 1.25rem 0;
    padding-left: 1.5rem;
    color: var(--text-secondary);
  }

  .prose li {
    margin-bottom: 0.5rem;
  }

  .prose blockquote {
    border-left: 4px solid var(--accent);
    padding-left: 1rem;
    margin: 1.5rem 0;
    color: var(--text-secondary);
    font-style: italic;
  }

  .prose img {
    border-radius: 0.5rem;
    margin: 1.5rem 0;
  }

  .prose hr {
    border: none;
    border-top: 1px solid var(--border);
    margin: 2rem 0;
  }

  .prose strong {
    color: var(--text-primary);
    font-weight: 600;
  }

  .prose em {
    color: var(--text-secondary);
  }
</style>
