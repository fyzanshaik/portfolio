---
import NavBar from '../components/NavBar.astro';
import '../styles/global.css';

const { frontmatter } = Astro.props;
const pageUrl = `https://personal-site.fyzan-shaik.workers.dev${Astro.url.pathname}`;

function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(date);
}
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link rel="canonical" href={pageUrl} />
    <link rel="alternate" type="text/plain" href="/llms.txt" title="LLMs.txt" />

    <title>{frontmatter.title} | Faizan Shaik</title>
    <meta name="description" content={frontmatter.description} />
    <meta name="keywords" content={frontmatter.tags?.join(', ')} />
    <meta name="author" content="Faizan Shaik" />
    <meta
      name="robots"
      content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1"
    />
    <meta
      name="article:published_time"
      content={new Date(frontmatter.date).toISOString()}
    />
    <meta name="article:author" content="Faizan Shaik" />
    {
      frontmatter.tags?.map((tag: string) => (
        <meta name="article:tag" content={tag} />
      ))
    }

    <meta property="og:type" content="article" />
    <meta property="og:url" content={pageUrl} />
    <meta property="og:title" content={frontmatter.title} />
    <meta property="og:description" content={frontmatter.description} />
    <meta property="og:site_name" content="Faizan Shaik Portfolio" />
    <meta property="og:locale" content="en_US" />
    <meta
      property="article:published_time"
      content={new Date(frontmatter.date).toISOString()}
    />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={pageUrl} />
    <meta name="twitter:title" content={frontmatter.title} />
    <meta name="twitter:description" content={frontmatter.description} />

    <script
      type="application/ld+json"
      set:html={JSON.stringify({
        '@context': 'https://schema.org',
        '@type': 'BlogPosting',
        headline: frontmatter.title,
        description: frontmatter.description,
        datePublished: new Date(frontmatter.date).toISOString(),
        author: {
          '@type': 'Person',
          name: 'Faizan Shaik',
          url: 'https://personal-site.fyzan-shaik.workers.dev',
        },
        keywords: frontmatter.tags?.join(', '),
        url: pageUrl,
      })}
    />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap"
      rel="stylesheet"
    />

    <script is:inline>
      (function () {
        const theme =
          localStorage.getItem('theme') ||
          (window.matchMedia('(prefers-color-scheme: dark)').matches
            ? 'dark'
            : 'light');
        if (theme === 'dark') {
          document.documentElement.classList.add('dark');
        }
      })();
    </script>
  </head>
  <body>
    <NavBar />

    <div id="fixed-buttons" class="fixed bottom-6 right-6 z-50 flex gap-2">
      <button
        id="back-to-top"
        class="w-11 h-11 rounded-full bg-[var(--bg-surface)] border border-[var(--border)] text-[var(--text-secondary)] hover:bg-[var(--accent)] hover:text-white hover:border-[var(--accent)] transition-all opacity-0 pointer-events-none shadow-lg hover:shadow-xl backdrop-blur-sm hover:scale-110"
        style="box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.2);"
        aria-label="Back to top"
      >
        <svg
          class="w-5 h-5 mx-auto"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2.5"
            d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
        </svg>
      </button>

      <a
        href="https://www.buymeacoffee.com/fyzanshaikg"
        target="_blank"
        id="buy-coffee"
        class="rounded-full"
        style="display: flex; align-items: center; justify-content: center; padding: 2px;"
        ><img
          src="https://cdn.buymeacoffee.com/buttons/v2/default-green.png"
          alt="Buy Me A Coffee"
          style="height: 40px !important; width: auto !important;"
        /></a
      >
    </div>

    <div
      id="progress-bar-mobile"
      class="md:hidden fixed top-0 left-0 w-full h-1 bg-[var(--border)] z-40"
    >
      <div
        id="progress-fill-mobile"
        class="h-full bg-[var(--accent)] transition-all duration-150"
        style="width: 0%"
      >
      </div>
    </div>

    <main class="pt-12 pb-20">
      <div class="max-w-[1000px] mx-auto px-6">
        <a
          href="/blog"
          class="inline-flex items-center gap-2 text-[var(--text-secondary)] hover:text-[var(--accent)] mb-12 transition-colors"
        >
          <svg
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"></path>
          </svg>
          Back to Blog
        </a>

        <article class="md:border-l md:border-[var(--border)] pl-0 md:pl-12">
          <header class="mb-12 text-center">
            <h1
              class="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 space-mono-bold leading-tight"
            >
              {frontmatter.title}
            </h1>
            <p
              class="text-lg text-[var(--text-secondary)] mb-6 leading-relaxed"
            >
              {frontmatter.description}
            </p>
            <div
              class="flex flex-wrap items-center justify-center gap-4 text-sm text-[var(--text-secondary)]"
            >
              <time>{formatDate(frontmatter.date)}</time>
              <span id="reading-time" class="text-[var(--text-secondary)]"
                >• calculating...</span
              >
              {
                frontmatter.tags && frontmatter.tags.length > 0 && (
                  <div class="flex flex-wrap gap-2">
                    {frontmatter.tags.map((tag: string) => (
                      <span class="px-2 py-1 rounded bg-[var(--bg-surface)] text-[var(--accent)] border border-[var(--border)]">
                        {tag}
                      </span>
                    ))}
                  </div>
                )
              }
            </div>
          </header>

          <div id="blog-content" class="prose prose-invert max-w-none">
            <slot />
          </div>
        </article>
      </div>
    </main>

    <script is:inline>
      (function () {
        const backToTopButton = document.getElementById('back-to-top');
        const buyCoffeeButton = document.getElementById('buy-coffee');

        function toggleBackToTop() {
          if (window.scrollY > 300) {
            backToTopButton.style.opacity = '1';
            backToTopButton.style.pointerEvents = 'auto';
            buyCoffeeButton.style.opacity = '1';
            buyCoffeeButton.style.pointerEvents = 'auto';
          } else {
            backToTopButton.style.opacity = '0';
            backToTopButton.style.pointerEvents = 'none';
            buyCoffeeButton.style.opacity = '0';
            buyCoffeeButton.style.pointerEvents = 'none';
          }
        }

        function scrollToTop() {
          window.scrollTo({
            top: 0,
            behavior: 'smooth',
          });
        }

        window.addEventListener('scroll', toggleBackToTop, { passive: true });
        backToTopButton.addEventListener('click', scrollToTop);

        toggleBackToTop();
      })();
    </script>

    <script>
      function calculateReadingTime() {
        const content = document.getElementById('blog-content');
        if (content) {
          const text = content.innerText || content.textContent || '';
          const wordCount = text.trim().split(/\s+/).length;
          const wordsPerMinute = 200;
          const minutes = Math.ceil(wordCount / wordsPerMinute);
          const readingTimeEl = document.getElementById('reading-time');
          if (readingTimeEl) {
            readingTimeEl.textContent = `• ${minutes} min read`;
          }
        }
      }

      function updateProgressBar() {
        const windowHeight = window.innerHeight;
        const documentHeight = document.documentElement.scrollHeight;
        const scrollTop = window.scrollY || document.documentElement.scrollTop;
        const scrollPercent =
          (scrollTop / (documentHeight - windowHeight)) * 100;

        const progressFillMobile = document.getElementById(
          'progress-fill-mobile'
        );
        if (progressFillMobile) {
          progressFillMobile.style.width = `${Math.min(100, Math.max(0, scrollPercent))}%`;
        }
      }

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          calculateReadingTime();
          updateProgressBar();
        });
      } else {
        calculateReadingTime();
        updateProgressBar();
      }

      window.addEventListener('scroll', updateProgressBar, { passive: true });
    </script>
  </body>
</html>

<style is:global>
  .prose {
    color: var(--text-primary);
  }

  .prose h2 {
    font-size: 1.875rem;
    font-weight: 700;
    margin-top: 2rem;
    margin-bottom: 1rem;
    color: var(--text-primary);
  }

  .prose h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    color: var(--text-primary);
  }

  .prose p {
    margin-bottom: 1.25rem;
    line-height: 1.75;
    color: var(--text-secondary);
  }

  .prose a {
    color: var(--accent);
    text-decoration: underline;
  }

  .prose a:hover {
    opacity: 0.8;
  }

  .prose code {
    background-color: var(--bg-primary);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
    font-family: 'Space Mono', monospace;
    color: var(--accent);
  }

  .prose pre {
    background-color: var(--bg-primary);
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1.5rem 0;
    border: 1px solid var(--border);
  }

  .prose pre code {
    background-color: transparent;
    padding: 0;
    border-radius: 0;
    color: var(--text-primary);
  }

  .prose ul,
  .prose ol {
    margin: 1.25rem 0;
    padding-left: 1.5rem;
    color: var(--text-secondary);
  }

  .prose li {
    margin-bottom: 0.5rem;
  }

  .prose blockquote {
    border-left: 4px solid var(--accent);
    padding-left: 1rem;
    margin: 1.5rem 0;
    color: var(--text-secondary);
    font-style: italic;
  }

  .prose img {
    border-radius: 0.5rem;
    margin: 1.5rem 0;
  }

  .prose hr {
    border: none;
    border-top: 1px solid var(--border);
    margin: 2rem 0;
  }

  .prose strong {
    color: var(--text-primary);
    font-weight: 600;
  }

  .prose em {
    color: var(--text-secondary);
  }
</style>
